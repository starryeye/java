package sub2_description;

public interface Optional1 {

    /**
     * Optional..
     *
     * Java 8 부터 도입된 클래스이다.
     * 값이 없을 수도 있는 "reference type 변수를 반환할 때" 사용한다.
     *      Optional 은 해당 값을 감싸는 컨테이너 클래스이다.
     * 값이 없을 수도 있음을 명시적으로 표현해준다.
     *      -> client 개발자에게 값이 없을 수 도 있다는 사실을 알게 해주어, 확실한 처리를 유도한다.
     * 코드 상에 "null" 이라는 키워드를 사용할 필요 없도록 해준다.
     * null 체크 로직을 간결하게 만들어준다.
     *
     *
     * best practice
     *      1. 반환 타입으로만 사용하자 (혹은 지역변수 정도)
     *      2. 클래스 맴버 변수(필드)로 사용하지 말자
     *      3. 메서드 매개변수로 사용하지 말자
     *      4. Collection 이나 배열을 Optional 로 감싸지 말자
     *              - 자체적으로 비어있다는 상태를 표현가능하기 때문이다
     *              - Collection 을 반환할때는 절대로 null 로 반환하지 말고 empty 로 반환하도록해야함
     *      5. isPresent(), get() 조합으로 이루어지는 패턴을 사용하지 말자
     *              - 사실상 null check 로직과 다를바가 없다.
     *      6. orElse() vs orElseGet() 의 차이점을 이해하고 사용하자
     *      7. Optional 이 불필요한 상황에서는 사용하지 말자
     *              - 항상 값이 존재하는 상황 (null 이 될 수 없는 경우)
     *              - 값이 없으면 예외를 발생시키는게 더 자연스러운 상황 (비즈니스 로직상 필수값이면 예외가 자연스러움)
     *              - 성능이 극도로 중요하고 극한의 최적화가 필요한 로우레벨 코드인 경우
     *              - null check 로직이 명시적으로 필요한 경우
     */
}
