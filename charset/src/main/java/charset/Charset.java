package charset;

public class Charset {

    /**
     * 개발자가 다루는 데이터..
     *      바이너리 데이터
     *          컴퓨터가 알아 보는 010101011 과 같은 컴퓨터 메모리에 저장되는 데이터
     *      텍스트 데이터
     *          사람이 알아볼 수 있는 문자기반의 데이터(숫자 포함)
     *          사람이 화면에서 보는 문자는 컴퓨터 입장에서는 의미 없는 그림일 뿐이다.`
     *
     * Charset..
     * 사람이 화면에서 보는 문자와 컴퓨터 메모리에서 사용되는 값을 매핑 시키는 테이블이다.
     *      그림과 메모리 값(숫자)를 매핑 시킨 테이블이다.
     *
     * 인코딩
     * 회면에 표시되는 문자그림 -> 인코딩 -> 컴퓨터 메모리나 디스크에 저장될 때의 값
     *
     * 디코딩
     * 컴퓨터 메모리나 디스크에 저장될 때의 값 -> 디코딩 -> 회면에 표시되는 문자그림
     *
     * 동일한 Charset 을 사용하지 않으면..
     * 인코딩 측면에서, 동일한 문자그림이라도 서로 다른 메모리 값이 사용될 수 도 있고 같은 값이 사용될 수 도 있다. (같은 값이 사용된다면 호환이 되는 것)
     * 디코딩 측면에서, 동일한 메모리 값이라도 서로 다른 문자그림이 사용될 수 도 있고 같은 문자그림이 사용될 수 도 있다. (같은 문자그림이 사용된다면 호환이 되는 것)
     *      서로 다른 문자그림이 매핑되면 글자가 깨져보인다.
     *
     *
     * ASCII
     *      가장 근본이 되는 Charset
     *      1byte(8bit) 범위
     *      십진수 숫자, 특수문자, 영어 대소문자 를 대표적으로 매핑시킬 수 있다.
     * ISO_8859_1
     *      ASCII 에서 확장
     *      1byte(8bit) 범위
     *      서유럽 문자 추가됨
     * EUC-KR
     *      ASCII 에서 확장
     *      알파벳은 1byte, 한글문자는 2byte 범위
     *      자주 사용되는 한글문자, 일본어 글자 등이 추가됨
     * MS949
     *      EUC-KR 에서 확장됨
     *      알파벳은 1byte, 한글문자는 2byte 범위
     *      드물게 사용되는 한글문자가 추가됨
     * UTF-8 (사실상 표준이다.)
     *      ASCII 에서 확장
     *      1byte 기본 ASCII, 라틴문자
     *      2byte 그리스어, 히브리어 등
     *      3byte 한글문자, 한자, 일본문자
     *      4byte 이모지, 고대문자 등
     *      전세계 모든 문자 표현가능
     * UTF-16
     *      ASCII 에서 확장되지 않음!
     *      기본 다국어(알파벳, 유럽문자, 한글문자, 한자, 일본문자 등) 2byte 범위
     *      나머지는 2 ~ 4 byte 범위에서 사용된다.
     *      앞선 다른 Charset 들과 모든 면에서 호환이 안된다.
     */
}
