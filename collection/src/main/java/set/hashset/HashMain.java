package set.hashset;

public class HashMain {

    /**
     * 해시 함수
     *      임의의 길이의 데이터를 입력으로 받아, 고정된 크기의 해시값(해시 코드)을 반환하는 함수
     *          int 형 반환의 경우 고정된 크기는 4 byte 이다.
     *      해시 자료구조에서 사용하는 해시 함수는 Obeject 의 hashCode() 를 오버라이딩해서 만든다.
     *
     * 해시 코드
     *      해시 함수를 통해 만들어지는 값으로, 데이터를 대표하는 값이다.
     *      int 값이 최종값이며, 아래 해시 인덱스를 만드는데 사용된다. (모든 객체를 해시 자료구조에 담기 위해 int 형으로 해시코드를 만든다.)
     *
     * 해시 인덱스
     *      데이터를 저장할 위치를 결정하는 인덱스 값이다.
     *      보통 해시 코드를 배열 크기로 나눈 나머지 값을 사용한다.
     *      equals 비교에서는 서로 다른데.. 해시 코드가 완전히 동일해서 해시 인덱스 까지 동일한 경우도 있지만, 해시 코드는 다르지만 해시 인덱스가 동일할 수 있다..
     *          이처럼 해시 인덱스가 동일한 경우를 해시 충돌이라 한다. 해시 충돌이 일어나더라도 해시 자료구조에서는 충돌을 인정하고 자료를 추가한다.
     *              최악의 경우 모든 원소가 동일한 해시 인덱스를 가지게 되면, 해시 인덱스 연산까지는 O(1) 이 걸리지만, 내부 원소를 찾는데(순차 equals 비교) O(n) 이 걸리게 된다.
     *
     * 원본 데이터 -> (해시 함수) -> 해시 코드
     * 해시 코드 -> (해시 인덱스 함수) -> 해시 인덱스
     * 배열[해시 인덱스] = 원본 데이터
     *      -> contains() 를 O(1) 로 만들 수 있다. (search)
     *
     *
     *
     */
}
